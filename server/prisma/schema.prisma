generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics"]
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id                     String          @id @default(uuid())
  name                   String
  categories             Category[]
  isActive               Boolean         @default(false)
  isFinished             Boolean         @default(false)
  players                Player[]
  matches                Match[]
  places                 Place[]
  eventRequests          EventRequest[]
  eventDoubles           EventDouble[]
  startDate              DateTime?
  finishDate             DateTime?
  matchDurationInMinutes Int?
  timeOfFirstMatch       Int?
  timeOfLastMatch        Int?
  games                  Game[]
  sets                   Set[]
  matchDates             MatchDate[]
  eventType              EventType       @default(ALLxALL) // todo change this default later
  matchType              MatchType       @default(SUPERSET)
  courts                 Court[]
  invite                 Invite?
  categoriesGroups       CategoryGroup[]
  eventMatches           EventMatch[]
  isGroupMatchesFinished Boolean         @default(false)
}

model CategoryGroup {
  id                  String         @id @default(uuid())
  category            Category       @relation(fields: [categoryId], references: [id])
  categoryId          String
  groups              DoublesGroup[]
  event               Event?         @relation(fields: [eventId], references: [id])
  eventId             String?
  finalMatches        EventMatch[]   @relation("EventFinalMatches")
  groupsStageFinished Boolean        @default(false)

  @@unique([eventId, categoryId])
}

model DoublesGroup {
  id                   String         @id @default(uuid())
  key                  String
  doubles              Double[]
  categoryGroup        CategoryGroup? @relation(fields: [categoryGroupId], references: [id])
  categoryGroupId      String?
  firstPlace           Double?        @relation("FirstPlaceDouble", fields: [firstPlaceDoublesId], references: [id])
  firstPlaceDoublesId  String?
  secondPlace          Double?        @relation("SecondPlaceDouble", fields: [secondPlaceDoublesId], references: [id])
  secondPlaceDoublesId String?
  groupMatches         EventMatch[]   @relation("EventGroupMatches")
}

enum EventType {
  ALLxALL
  GROUPS
}

model EventRequest {
  event      Event         @relation(fields: [eventId], references: [id])
  eventId    String
  double     Double        @relation(fields: [doubleId], references: [id])
  doubleId   String
  category   Category      @relation(fields: [categoryId], references: [id])
  categoryId String
  status     RequestStatus @default(PENDING)

  @@id([eventId, doubleId, categoryId])
}

enum RequestStatus {
  PENDING
  APPROVED
}

model Court {
  id          String      @id @default(uuid())
  name        String
  isAvailable Boolean     @default(true)
  events      Event[]
  matches     Match[]
  place       Place       @relation(fields: [placeId], references: [id])
  placeId     String
  matchDates  MatchDate[]

  @@unique([name, placeId])
}

model EventDouble {
  event      Event      @relation(fields: [eventId], references: [id])
  eventId    String
  double     Double     @relation(fields: [doubleId], references: [id])
  doubleId   String
  category   Category   @relation(fields: [categoryId], references: [id])
  categoryId String
  atRest     MatchDate? @relation(fields: [atRestId], references: [id])
  atRestId   String?

  @@id([eventId, doubleId, categoryId])
}

model Category {
  id            String          @id @default(uuid())
  level         Int
  players       Player[]
  doubles       Double[]
  type          CatType
  events        Event[]
  matches       Match[]
  eventDoubles  EventDouble[]
  eventRequests EventRequest[]
  categoryGroup CategoryGroup[]

  @@unique([level, type], name: "CategoryId")
}

enum CatType {
  ALL
  F
  M
}

model EventMatch {
  number            Int            @default(autoincrement())
  id                String         @id @default(uuid())
  type              EventMatchType @default(GROUP)
  event             Event          @relation(fields: [eventId], references: [id])
  eventId           String
  match             Match          @relation("Match", fields: [matchId], references: [id])
  matchId           String         @unique
  matchesWinnersRef Match[]        @relation("MatchesWinnerRef")
  categoryGroup     CategoryGroup? @relation("EventFinalMatches", fields: [categoryGroupId], references: [id])
  categoryGroupId   String?
  doublesGroup      DoublesGroup?  @relation("EventGroupMatches", fields: [doublesGroupId], references: [id])
  doublesGroupId    String?

  @@unique([eventId, matchId])
}

enum EventMatchType {
  GROUP
  ROUND_OF_16
  ROUND_OF_8
  ROUND_OF_4
  FINAL
  UNCLASSIFIED
}

model Match {
  id              String      @id @default(uuid())
  players         Player[]
  isFinished      Boolean     @default(false)
  category        Category?   @relation(fields: [categoryId], references: [id])
  categoryId      String?
  winner          Double?     @relation("MatchWinnerDouble", fields: [winnerDoublesId], references: [id])
  winnerDoublesId String?
  sets            Set[]
  doubles         Double[]
  event           Event?      @relation(fields: [eventId], references: [id])
  eventId         String?
  type            MatchType   @default(SUPERSET)
  matchDate       MatchDate?
  court           Court?      @relation(fields: [courtId], references: [id])
  courtId         String?
  invite          Invite?
  eventMatch      EventMatch? @relation("Match")
  winnerRef       EventMatch? @relation("MatchesWinnerRef", fields: [winnerRefId], references: [id])
  winnerRefId     String?
}

enum MatchType {
  BO3
  BO2_SUPERTIE
  SUPERSET
}

model MatchDate {
  id      String        @id @unique @default(uuid())
  event   Event         @relation(fields: [eventId], references: [id])
  eventId String
  match   Match?        @relation(fields: [matchId], references: [id])
  matchId String?       @unique
  start   DateTime
  finish  DateTime
  court   Court         @relation(fields: [courtId], references: [id])
  courtId String
  atRest  EventDouble[]

  @@unique([eventId, start, finish, courtId])
}

model Set {
  id          String   @id @default(uuid())
  type        SetType  @default(SUPER)
  number      Int
  doubles     Double[]
  winner      Double?  @relation("SetWinnerDouble", fields: [setWinnerId], references: [id])
  setWinnerId String?
  result      String?
  match       Match    @relation(fields: [matchId], references: [id])
  matchId     String
  games       Game[]
  isFinished  Boolean  @default(false)
  events      Event[]
}

enum SetType {
  NORMAL
  SUPER
  TIEBREAK
  SUPERTIEBREAK
}

model Game {
  id       String   @id @default(uuid())
  set      Set      @relation(fields: [setId], references: [id])
  setId    String
  doubles  Double[] @relation("GamesPlayed") //todo testing
  winner   Double?  @relation("GameWinnerDouble", fields: [winnerId], references: [id])
  winnerId String?
  events   Event[]
}

model User {
  id           String    @id @default(uuid())
  firstName    String?
  lastName     String?
  email        String    @unique
  password     String
  dob          DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  player       Player?   @relation(fields: [playerId], references: [id])
  playerId     String?   @unique
  role         Role      @default(USER)
  hashedRt     String?
  profileImage String?
}

enum Role {
  USER
  ADMIN
}

model Invite {
  id         String     @id @default(uuid())
  inviteType InviteType
  players    Player[]
  double     Double?    @relation(fields: [doublesId], references: [id])
  doublesId  String?
  event      Event?     @relation(fields: [eventId], references: [id])
  eventId    String?    @unique
  match      Match?     @relation(fields: [matchId], references: [id])
  matchId    String?    @unique
  inviterId  String
  invitedId  String
  createdAt  DateTime   @default(now())

  @@unique([inviterId, invitedId, inviteType])
}

enum InviteType {
  FRIENDS
  EVENT
  DOUBLES
  MATCH
}

model Player {
  id         String          @id @default(uuid())
  firstName  String?
  lastName   String?
  category   Category        @relation(fields: [categoryId], references: [id])
  categoryId String
  position   PlayerPosition?
  matches    Match[]
  doubles    Double[]
  events     Event[]
  user       User?
  invites    Invite[]
}

enum PlayerPosition {
  REVES
  DRIVE
}

model Double {
  id                  String         @id @default(uuid())
  players             Player[]
  matches             Match[]
  category            Category       @relation(fields: [categoryId], references: [id])
  categoryId          String
  games               Game[]         @relation("GamesPlayed")
  sets                Set[]
  matchesWins         Match[]        @relation("MatchWinnerDouble")
  setsWins            Set[]          @relation("SetWinnerDouble")
  gamesWins           Game[]         @relation("GameWinnerDouble")
  eventRequests       EventRequest[]
  eventDouble         EventDouble[]
  invites             Invite[]
  doublesGroup        DoublesGroup[]
  firstPlaceInGroups  DoublesGroup[] @relation("FirstPlaceDouble")
  secondPlaceInGroups DoublesGroup[] @relation("SecondPlaceDouble")
}

model Place {
  id      String  @id @default(uuid())
  name    String?
  address String? @unique
  events  Event[]
  courts  Court[]
}
