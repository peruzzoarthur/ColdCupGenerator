generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["metrics"]
}

generator docs {
  provider = "node node_modules/prisma-docs-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id           String        @id @default(uuid())
  name         String
  categories   Category[]
  isActive     Boolean       @default(false)
  players      Player[]
  matches      Match[]
  places       Place[]
  eventDoubles EventDouble[] // Relation to link doubles specifically to an event
  startDate    DateTime?
  finishDate   DateTime?
  // courts       Court[]
}

// model Court {
//   id          String  @id @default(uuid())
//   name        String
//   isAvailable Boolean @default(true)
//   events      Event[]
// }

model EventDouble {
  event      Event    @relation(fields: [eventId], references: [id])
  eventId    String
  double     Double   @relation(fields: [doubleId], references: [id])
  doubleId   String
  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  @@id([eventId, doubleId, categoryId])
}

model Category {
  id           String        @id @default(uuid())
  level        Int
  players      Player[]
  doubles      Double[]
  type         CatType
  events       Event[]
  matches      Match[]
  eventDoubles EventDouble[]

  @@unique([level, type], name: "CategoryId")
}

model Match {
  id              String    @id @default(uuid())
  number          Int       @default(autoincrement())
  players         Player[]
  isFinished      Boolean   @default(false)
  category        Category? @relation(fields: [categoryId], references: [id])
  categoryId      String?
  winner          Double?   @relation("MatchWinnerDouble", fields: [winnerDoublesId], references: [id])
  winnerDoublesId String?
  sets            Set[]
  doubles         Double[]
  event           Event?    @relation(fields: [eventId], references: [id])
  eventId         String?
  date            DateTime?
  type            MatchType @default(SUPERSET)
}

model Set {
  id          String   @id @default(uuid())
  type        SetType  @default(SUPER)
  // players     Player[]
  doubles     Double[]
  winner      Double?  @relation("SetWinnerDouble", fields: [setWinnerId], references: [id])
  setWinnerId String?
  result      String?
  match       Match    @relation(fields: [id], references: [id])
  games       Game[]
  isFinished  Boolean  @default(false)
}

model Game {
  id       String  @id @default(uuid())
  set      Set     @relation(fields: [setId], references: [id])
  setId    String
  // Double   Double? @relation(fields: [doubleId], references: [id])
  // doubleId String?
  winner   Double? @relation("GameWinnerDouble", fields: [winnerId], references: [id])
  winnerId String?
}

model Player {
  id         String          @id @default(uuid())
  email      String?         @unique
  firstName  String?
  lastName   String?
  role       Role            @default(USER)
  categories Category[]
  position   PlayerPosition?
  matches    Match[]
  doubles    Double[]
  events     Event[]
  // sets       Set[]
  // games      Game[]
}

model Double {
  id          String   @id @default(uuid())
  players     Player[]
  matchs      Match[]
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  String
  // games       Game[]
  sets        Set[]
  matchesWins Match[]  @relation("MatchWinnerDouble")
  setsWins    Set[]    @relation("SetWinnerDouble")
  gamesWins   Game[]   @relation("GameWinnerDouble")

  eventDouble EventDouble[]
}

model Place {
  id      String  @id @default(uuid())
  name    String?
  address String? @unique
  events  Event[]
}

enum Role {
  USER
  ADMIN
}

enum CatType {
  ALL
  F
  M
}

enum PlayerPosition {
  REVES
  DRIVE
}

enum SetType {
  NORMAL
  SUPER
}

enum MatchType {
  BO3
  BO5
  SUPERSET
}
